const fs = require('fs');
const path = require('path');
const { PNG } = require('pngjs');

console.log('Starting sticker generation...');

// --- Configuration ---
const GRID_SIZE = 32;
const IMAGE_DIR = path.join(__dirname, 'assets', 'TMP');
const OUTPUT_DATA_DIR = path.join(__dirname, 'assets', 'stickers', 'data');
const OUTPUT_INDEX_FILE = path.join(__dirname, 'assets', 'stickers', 'index.js');


const LUMINANCE_THRESHOLD = 128;
// --------------------

// Ensure output directory exists
if (!fs.existsSync(OUTPUT_DATA_DIR)) {
  fs.mkdirSync(OUTPUT_DATA_DIR, { recursive: true });
}

// --- Main Logic ---
const imageFiles = fs.readdirSync(IMAGE_DIR).filter(file => file.endsWith('.png'));

if (imageFiles.length === 0) {
  console.log('No PNG images found in `assets/Images` directory. Exiting.');
  return;
}

const allStickers = [];

for (const file of imageFiles) {
  try {
    const imagePath = path.join(IMAGE_DIR, file);
    const buffer = fs.readFileSync(imagePath);
    const png = PNG.sync.read(buffer);

    if (png.width !== GRID_SIZE || png.height !== GRID_SIZE) {
      console.error(`ERROR: Image ${file} is not ${GRID_SIZE}x${GRID_SIZE} pixels. Skipping.`);
      continue;
    }

    console.log(`Processing ${file} to black and white...`);

    const gridData = [];
    for (let y = 0; y < png.height; y++) {
      const row = [];
      for (let x = 0; x < png.width; x++) {
        const idx = (png.width * y + x) << 2;
        const r = png.data[idx];
        const g = png.data[idx + 1];
        const b = png.data[idx + 2];
        const a = png.data[idx + 3];

        // If pixel is mostly transparent, it remains null.
        if (a < 128) {
          row.push(null);
          continue;
        }

        // Calculate the luminance (perceived brightness) of the pixel.
        const luminance = 0.299 * r + 0.587 * g + 0.114 * b;

        // If the luminance is below the threshold, the color is black. Otherwise, it's white.
        const finalColor = luminance < LUMINANCE_THRESHOLD ? '#000000' : '#FFFFFF';
        
        row.push(finalColor);
      }
      gridData.push(row);
    }
    
    // --- Write Files ---
    const name = path.basename(file, '.png');
    const varName = `${name}Grid`;
    const dataFileName = `${name}.js`;
    const dataFilePath = path.join(OUTPUT_DATA_DIR, dataFileName);

    const fileContent = `export const ${varName} = ${JSON.stringify(gridData)};`;
    fs.writeFileSync(dataFilePath, fileContent);
    
    allStickers.push({ name, varName });

  } catch (error) {
    console.error(`\n--- Failed to process ${file} ---`);
    console.error(error.message);
    console.error('Skipping this file.\n');
  }
}

// --- Generate the main index.js file ---
if (allStickers.length > 0) {
  let indexContent = `// This file is auto-generated by generate-stickers.js. DO NOT EDIT.\n\n`;

  allStickers.forEach(sticker => {
    indexContent += `import { ${sticker.varName} } from './data/${sticker.name}';\n`;
  });

  indexContent += `\nexport const stickers = [\n`;

  allStickers.forEach(sticker => {
      const displayName = sticker.name.charAt(0).toUpperCase() + sticker.name.slice(1);
      indexContent += `  {\n`;
      indexContent += `    id: '${sticker.name}',\n`;
      indexContent += `    name: '${displayName}',\n`;
      indexContent += `    gridData: ${sticker.varName},\n`;
      indexContent += `  },\n`;
  });

  indexContent += `];\n`;

  fs.writeFileSync(OUTPUT_INDEX_FILE, indexContent);

  console.log(`\nSuccessfully generated ${allStickers.length} stickers!`);
  console.log(`Sticker index file created at: ${OUTPUT_INDEX_FILE}`);
} else {
  console.log('\nNo stickers were generated.');
}